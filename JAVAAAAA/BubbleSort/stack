public class DynamicStack {
    private int[] stack;
    private int top;
    private int size;

    public DynamicStack(int size) {
        this.size = size;
        stack = new int[size];
        top = -1;
    }

    public boolean isEmpty() {
        return (top == -1);
    }

    public boolean isFull() {
        return (top == size - 1);
    }

    public void push(int item) {
        if (isFull()) {
            // resize the stack
            int[] newStack = new int[2 * size];
            System.arraycopy(stack, 0, newStack, 0, size);
            size *= 2;
            stack = newStack;
        }
        stack[++top] = item;
    }

    public int pop() {
        if (isEmpty()) {
            throw new EmptyStackException();
        }
        int item = stack[top--];
        if (top == size / 2) {
            // resize the stack
            int[] newStack = new int[size / 2];
            System.arraycopy(stack, 0, newStack, 0, top + 1);
            size /= 2;
            stack = newStack;
        }
        return item;
    }

    public int peek() {
        if (isEmpty()) {
            throw new EmptyStackException();
        }
        return stack[top];
    }
}
